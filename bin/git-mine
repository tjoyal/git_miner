#!/usr/bin/env ruby

STDOUT.sync = true

require File.join(__dir__, '..', 'lib', 'git_miner')

require 'optparse'

options = {
  engine: :ruby,
  dispatch: :parallel,
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: git mine [options]"

  opts.on("--engine [ruby|c]", [:ruby, :c], "Set the engine (default: ruby)") do |engine|
    options[:engine] = engine
  end

  opts.on("--dispatch [simple|parallel]", [:simple, :parallel], "Set the dispatch (default: parallel)") do |dispatch|
    options[:dispatch] = dispatch
  end

  opts.on("--verbose", "Run verbosely (default: false)") do |verbose|
    options[:verbose] = verbose
  end

  opts.on("--register [prefix]", "Register automated post commit git hook") do |prefix|
    if prefix.nil?
      puts parser
      exit 1
    end

    GitMiner::RegisterHook.register(prefix: prefix)
    exit
  end

  opts.on_tail("-v", "--version", "Returns the current version") do
    puts "GitMiner #{GitMiner::VERSION}"
    exit
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

parser.parse!

unless ARGV.size == 1
  puts parser
  exit 1
end

GitMiner.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

GitMiner.logger.debug("OptionParser: #{options.inspect}")

prefix = ARGV.first

engine = case(options[:engine])
when :ruby
  GitMiner::Engine::RubyEngine
when :c
  GitMiner::Engine::CExtensionEngine
else
  raise ArgumentError, "unexpected engine"
end

dispatch = case(options[:dispatch])
when :simple
  GitMiner::Dispatch::SimpleDispatch
when :parallel
  GitMiner::Dispatch::ParallelDispatch
else
  raise ArgumentError, "unexpected engine"
end

miner = GitMiner::Core.new(
  engine: engine,
  dispatch: dispatch,
  prefix: prefix,
)
miner.validate
miner.mine
miner.report
miner.alter
